using MAT, JuMP, Ipopt

# generator-related parameters; unit1, unit2, unit3
count_generators = 103
iterator_generators = 1:103
Pmin = [320.0, 320.0, 292.0, 152.0, 80.0, 480.0, 400.0, 304.0, 304.0, 280.0, 280.0, 167.2, 440.0, 400.0, 400.0, 400.0, 360.0, 334.4, 209.0, 323.0, 159.6, 334.4, 342.0, 334.4, 334.4, 209.0, 209.0, 167.2, 334.4, 334.4, 400.0, 400.0, 400.0, 360.0, 480.0, 400.0, 400.0, 360.0, 950.0, 950.0, 950.0, 950.0, 902.5, 902.5, 41.8, 334.4, 334.4, 334.4, 200.0, 280.0, 950.0, 950.0, 950.0, 902.5, 902.5, 950.0, 950.0, 665.0, 665.0, 152.0, 400.0, 400.0, 400.0, 400.0, 400.0, 360.0, 334.4, 334.4, 292.6, 440.0, 400.0, 400.0, 400.0, 360.0, 292.6, 292.6, 167.2, 360.0, 440.0, 400.0, 400.0, 400.0, 360.0, 950.0, 950.0, 902.5, 902.5, 617.5, 167.2, 376.2, 1330.0, 1330.0, 292.6, 167.2, 292.6, 334.4, 292.6, 209.0, 376.2, 376.2, 334.4, 334.4, 292.6]
Pmax = [800.0, 800.0, 730.0, 400.0, 200.0, 1200.0, 1000.0, 800.0, 800.0, 700.0, 700.0, 440.0, 1100.0, 1000.0, 1000.0, 1000.0, 900.0, 880.0, 550.0, 850.0, 420.0, 880.0, 900.0, 880.0, 880.0, 550.0, 550.0, 440.0, 880.0, 880.0, 1000.0, 1000.0, 1000.0, 900.0, 1200.0, 1000.0, 1000.0, 900.0, 1000.0, 1000.0, 1000.0, 1000.0, 950.0, 950.0, 110.0, 880.0, 880.0, 880.0, 500.0, 700.0, 1000.0, 1000.0, 1000.0, 950.0, 950.0, 1000.0, 1000.0, 700.0, 700.0, 400.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 900.0, 880.0, 880.0, 770.0, 1100.0, 1000.0, 1000.0, 1000.0, 900.0, 770.0, 770.0, 440.0, 900.0, 1100.0, 1000.0, 1000.0, 1000.0, 900.0, 1000.0, 1000.0, 950.0, 950.0, 650.0, 440.0, 990.0, 1400.0, 1400.0, 770.0, 440.0, 770.0, 880.0, 770.0, 550.0, 990.0, 990.0, 880.0, 880.0, 770.0]

gencost_c2 = [0.02665058, 0.02873618, 0.02700896, 0.002190581, 0.02920346, 0.03011184, 0.02856854, 0.004506906, 0.005144581, 0.02869702, 0.02607132, 0.0021215, 0.03056746, 0.02638636, 0.02673, 0.029414, 0.0256102, 0.004658845, 0.003344804, 0.00463853, 0.002143461, 0.004480435, 0.004740136, 0.004595392, 0.005138019, 0.003292734, 0.003507227, 0.002225588, 0.004601045, 0.00498398, 0.03021238, 0.02905364, 0.02949144, 0.02567466, 0.02935504, 0.02954072, 0.03017982, 0.03013318, 0.002488928, 0.002216052, 0.002465857, 0.002166224, 0.002016009, 0.002075879, 0.005345829, 0.00477091, 0.005298641, 0.004629736, 0.02862178, 0.02916122, 0.002093114, 0.002257314, 0.002096917, 0.002281964, 0.002403539, 0.002217254, 0.002197161, 0.001995453, 0.001715461, 0.002339635, 0.0265221, 0.02606164, 0.02681822, 0.02975478, 0.02721884, 0.03030918, 0.004825899, 0.004614698, 0.004151623, 0.02754884, 0.02672758, 0.02838572, 0.02852036, 0.02840706, 0.004547713, 0.004411317, 0.002248107, 0.02656764, 0.02949914, 0.02609464, 0.02888512, 0.02576816, 0.02997896, 0.002076182, 0.002101611, 0.002324059, 0.002404056, 0.001659055, 0.002255913, 0.005959016, 0.002787101, 0.002589901, 0.004349065, 0.002193528, 0.004445024, 0.004908156, 0.004253628, 0.003827745, 0.006671083, 0.00600571, 0.004819289, 0.004644605, 0.004370883]
gencost_c1 = [23.85120778, 25.71773146, 24.26856934, 47.25055464, 26.3880225, 26.607723, 25.50166189, 51.60472841, 49.97505786, 25.78819927, 23.42872105, 50.30180805, 27.1737834, 23.55371598, 23.86049012, 26.2564005, 22.91199596, 50.8740774, 62.00381461, 47.8568101, 48.52912753, 48.92585766, 51.76176213, 50.18117602, 56.10660281, 61.03857345, 65.01469671, 48.00564815, 50.24290385, 54.42451217, 26.96907006, 25.93474864, 26.32544964, 22.9696403, 25.93904663, 26.36937889, 26.93988995, 26.95835981, 6.048387453, 5.385267407, 5.992320854, 5.26417786, 4.801709639, 4.944308729, 36.87241612, 52.09781206, 57.86057388, 50.55620672, 25.7868722, 26.20532122, 5.086512482, 5.485537961, 5.095755455, 5.435158894, 5.724725211, 5.388186707, 5.339360046, 4.16159826, 3.577662996, 50.46562034, 23.67492985, 23.26392503, 23.93920955, 26.56057184, 24.29690952, 27.11592314, 52.6982868, 50.3919949, 47.5366803, 24.49033832, 23.85836416, 25.33854588, 25.45868003, 25.4142174, 52.07197079, 50.5102111, 48.49138028, 23.76848326, 26.22398471, 23.29334293, 25.78423435, 23.00188453, 26.8205252, 5.045367131, 5.10716125, 5.535420409, 5.725956486, 3.338642759, 48.65975234, 56.22685735, 7.611356666, 7.072820045, 49.79741857, 47.31413069, 50.89616612, 53.59652525, 48.70465336, 70.95626507, 62.94563192, 56.66743609, 52.62611156, 50.71857822, 50.04723858]
gencost_c0 = [1553.769721, 1675.363059, 1437.227878, 2451.396366, 1227.02187, 2629.633684, 2080.515305, 5354.588731, 5185.491522, 1464.460476, 1330.470408, 2609.697821, 2447.834897, 1921.595023, 1946.622737, 2142.089536, 1679.158626, 5278.77522, 3216.807231, 4965.698763, 2517.729745, 5076.62484, 5370.8828, 5206.87867, 5821.710382, 3166.729751, 3373.01419, 2490.571218, 5213.283648, 5647.17398, 2200.231626, 2115.848045, 2147.722808, 1683.383225, 2563.548589, 2151.306711, 2197.85101, 1975.705761, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 637.656761, 5405.751875, 6003.705211, 5245.792452, 1827.729401, 1488.148001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2618.196532, 1931.484077, 1897.952858, 1953.044945, 2166.904904, 1982.227367, 1987.253155, 5468.05809, 5228.753572, 4932.481586, 2206.10814, 1946.449293, 2067.207727, 2077.008692, 1862.539712, 5403.070543, 5241.019874, 2515.771388, 1741.928279, 2362.276314, 1900.352874, 2103.56856, 1876.574672, 1965.604233, 0.0, 0.0, 0.0, 0.0, 0.0, 2524.506664, 5834.188184, 0.0, 0.0, 5167.059386, 2454.694742, 5281.06718, 5561.26074, 5053.672329, 3681.267483, 6531.338924, 5879.903336, 5460.569072, 5262.640377, 5192.981108]


demand = 67369 # MWh


model = Model(Ipopt.Optimizer)

@variable(model, gen_pmin[i] <= gen_power[i=1:gen_count] <= gen_pmax[i])

@objective(model, Min, sum(gencost_c2[i]*gen_power[i]^2 + gencost_c1[i]*gen_power[i] for i in 1:gen_count))

@constraint(model, sum(gen_power[i] for i in 1:gen_count) == demand)

optimize!(model)
dual_val = dual(only(all_constraints(model, EqualTo{Float64})))

# model declaration
ED = Model(Ipopt.Optimizer)
# variable declaration
@variable(ED, Pmin[g] <= pg[g in genset] <= Pmax[g])
# constraint declaration
@constraint(ED, load_generation_balance, sum(pg) == 67369)
# objecive function declaration
@expression(ED, OCgen[g in iterator_generators], MC[g] * pg[g]) # element-wise multiplication
@expression(ED, OC, sum(OCgen)) # sum; complete dot-product
@objective(ED, Min, OC) # value.(OCgen) / value(OC)

optimize!(ED)

value.(pg)
value.(OCgen)

dual.(load_generation_balance)
